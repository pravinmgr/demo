public static class AjaxCustomBindingExtensions<T>
{
    public static IQueryable<T> ApplyPaging(this IQueryable<T> data, int page, int pageSize)
    {
        if (pageSize > 0 && page > 0)
        {
            data = data.Skip((page - 1) * pageSize);
        }

        data = data.Take(pageSize);

        return data;
    }

    public static IEnumerable ApplyGrouping(this IQueryable<T> data, IList<GroupDescriptor> groupDescriptors)
    {
        if (groupDescriptors != null && groupDescriptors.Any())
        {
            Func<IEnumerable<T>, IEnumerable<AggregateFunctionsGroup>> selector = null;
            foreach (var group in groupDescriptors.Reverse())
            {
                if (selector == null)
                {
                    // Adjust the conditions based on your model properties
                    if (group.Member == "Property1")
                    {
                        selector = Items => BuildInnerGroup(Items, item => ((YourModelType)item).Property1);
                    }
                    else if (group.Member == "Property2")
                    {
                        selector = Items => BuildInnerGroup(Items, item => ((YourModelType)item).Property2);
                    }
                    // Add more conditions as needed
                }
                else
                {
                    // Adjust the conditions based on your model properties
                    if (group.Member == "Property1")
                    {
                        selector = BuildGroup(item => ((YourModelType)item).Property1, selector);
                    }
                    else if (group.Member == "Property2")
                    {
                        selector = BuildGroup(item => ((YourModelType)item).Property2, selector);
                    }
                    // Add more conditions as needed
                }
            }

            return selector.Invoke(data).ToList();
        }

        return data.ToList();
    }

    private static Func<IEnumerable<T>, IEnumerable<AggregateFunctionsGroup>>
        BuildGroup<TKey>(Expression<Func<T, TKey>> groupSelector, Func<IEnumerable<T>,
        IEnumerable<AggregateFunctionsGroup>> selectorBuilder)
    {
        var tempSelector = selectorBuilder;
        return items => items.GroupBy(groupSelector.Compile())
                             .Select(group => new AggregateFunctionsGroup
                             {
                                 Key = group.Key,
                                 HasSubgroups = true,
                                 Member = groupSelector.MemberWithoutInstance(),
                                 Items = tempSelector.Invoke(group).ToList()
                             });
    }

    private static IEnumerable<AggregateFunctionsGroup> BuildInnerGroup<TKey>(IEnumerable<T> group,
        Expression<Func<T, TKey>> groupSelector)
    {
        return group.GroupBy(groupSelector.Compile())
                    .Select(innerGroup => new AggregateFunctionsGroup
                    {
                        Key = innerGroup.Key,
                        Member = groupSelector.MemberWithoutInstance(),
                        Items = innerGroup.ToList()
                    });
    }

    public static IQueryable<T> ApplySorting(this IQueryable<T> data,
                IList<GroupDescriptor> groupDescriptors, IList<SortDescriptor> sortDescriptors)
    {
        if (groupDescriptors != null && groupDescriptors.Any())
        {
            foreach (var groupDescriptor in groupDescriptors.Reverse())
            {
                data = AddSortExpression(data, groupDescriptor.SortDirection, groupDescriptor.Member);
            }
        }

        if (sortDescriptors != null && sortDescriptors.Any())
        {
            foreach (SortDescriptor sortDescriptor in sortDescriptors)
            {
                data = AddSortExpression(data, sortDescriptor.SortDirection, sortDescriptor.Member);
            }
        }

        return data;
    }

    private static IQueryable<T> AddSortExpression(IQueryable<T> data, ListSortDirection sortDirection, string memberName)
    {
        // Implement sorting based on memberName and sortDirection
        // Note: Update this based on your model properties
        // Example:
        if (sortDirection == ListSortDirection.Ascending)
        {
            data = data.OrderBy(order => ExpressionHelper.GetPropertyValue(order, memberName));
        }
        else
        {
            data = data.OrderByDescending(order => ExpressionHelper.GetPropertyValue(order, memberName));
        }

        return data;
    }

    public static IQueryable<T> ApplyFiltering(this IQueryable<T> data,
       IList<IFilterDescriptor> filterDescriptors)
    {
        if (filterDescriptors.Any())
        {
            data = data.Where(ExpressionBuilder.Expression<T>(filterDescriptors, false));
        }
        return data;
    }
}
