
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;

// ...

string columnnamelist = "id,name,location";
string[] columns = columnnamelist.Split(',');

// Create a dictionary to map property names to expressions
var propertyExpressions = new Dictionary<string, Expression<Func<Department, object>>>
{
    { "id", d => d.id },
    { "name", d => d.name },
    { "location", d => d.location },
    // Add other columns as needed
};

// Build the projection dynamically based on the columns
var projection = columns
    .Select(column =>
    {
        if (propertyExpressions.TryGetValue(column.Trim(), out var expression))
        {
            return expression;
        }
        else
        {
            // Handle the case where the column is not found (log, throw exception, etc.)
            return null;
        }
    })
    .Where(expression => expression != null)
    .ToArray();

// Perform the query with the dynamic projection
var data = dbcontext.department
    .Select(d => new
    {
        // Dynamically apply the selected columns
        SelectedColumns = projection.Select(expr => expr.Compile()(d)),
    })
    .ToList();




using System;
using System.Linq;
using System.Reflection;

// ...

string columnnamelist = "id,name,location";
string[] columns = columnnamelist.Split(',');

var data = dbcontext.department
    .Select(entity =>
    {
        var entityType = entity.GetType();
        var result = new ExpandoObject() as IDictionary<string, object>;

        foreach (var column in columns)
        {
            var property = entityType.GetProperty(column.Trim(), BindingFlags.IgnoreCase | BindingFlags.Public | BindingFlags.Instance);
            
            if (property != null)
            {
                result[column] = property.GetValue(entity);
            }
            else
            {
                // Handle the case where the property is not found (log, throw exception, etc.)
            }
        }

        return result;
    })
    .ToList();






using System;
using System.Collections.Generic;
using ClosedXML.Excel;

class Program
{
    static void Main()
    {
        // Sample data as a list of anonymous objects
        var data = new List<object>
        {
            new { Id = 1, Name = "John Doe", Age = 25 },
            new { Id = 2, Name = "Jane Doe", Age = 30 },
            // Add more objects as needed
        };

        // File path to save the Excel file
        string filePath = "Data.xlsx";

        // Export data to Excel
        ExportToExcel(data, filePath);

        Console.WriteLine($"Excel file exported to: {filePath}");
    }

    static void ExportToExcel(List<object> data, string filePath)
    {
        using (var workbook = new XLWorkbook())
        {
            var worksheet = workbook.Worksheets.Add("Data");

            // Assuming the properties are consistent among the objects in the list
            var properties = data.First().GetType().GetProperties();

            // Add headers
            for (int i = 0; i < properties.Length; i++)
            {
                worksheet.Cell(1, i + 1).Value = properties[i].Name;
            }

            // Add data
            int row = 2;
            foreach (var item in data)
            {
                for (int i = 0; i < properties.Length; i++)
                {
                    worksheet.Cell(row, i + 1).Value = properties[i].GetValue(item);
                }
                row++;
            }

            workbook.SaveAs(filePath);
        }
    }
}








 public ActionResult ExportFilteredUsers(DateTime? fromDate, DateTime? toDate)
 {
     DataTable dt = new DataTable("InterestedUsers");
     dt.Columns.AddRange(new DataColumn[5] { new DataColumn("User Name"),
                                     new DataColumn("Email"),
                                     new DataColumn("Mobile Number"),
                                     new DataColumn("Ability Level"),
                                     new DataColumn("Interested On") });
     NewsletterUserList newslettersList = new NewsletterUserList();
     newslettersList.FromDate = fromDate;
     newslettersList.ToDate = toDate;
     List<NewsletterUserList> model = _userService.GetNewsletterUserList(newslettersList, null, null, 0, 0, LoginUserID).Result.ToList();
     foreach (var user in model)
     {
         dt.Rows.Add(user.UserName, user.Email, user.MobileNumber, user.AbilityLevel, user.InterestedOn);
     }
     using (XLWorkbook wb = new XLWorkbook())
     {
         wb.Worksheets.Add(dt);
         using (MemoryStream stream = new MemoryStream())
         {
             wb.SaveAs(stream);
             return File(stream.ToArray(), "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "Interested Users.xlsx");
         }
     }
 }

closeXML