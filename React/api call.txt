// GridComponent.tsx
import React, { useState, useEffect } from 'react';
import { AgGridReact } from 'ag-grid-react';
import { ColDef } from 'ag-grid-community';
import 'ag-grid-community/styles/ag-grid.css';
import 'ag-grid-community/styles/ag-theme-alpine.css';

interface RowData {
  store: string;
  datapoint: number;
  test: string;
  inactive: boolean;
}

const GridComponent: React.FC = () => {
  const [rowData, setRowData] = useState<RowData[]>([]);
  const [selectedOption, setSelectedOption] = useState<string>(''); // State for dropdown selection
  const [columnDefs] = useState<ColDef[]>([
    { headerName: 'Store', field: 'store' },
    { headerName: 'Datapoint', field: 'datapoint', sortable: true, filter: true },
    { headerName: 'Test', field: 'test' },
    {
      headerName: 'InActive',
      field: 'inactive',
      cellRenderer: (params: any) => (params.value ? 'Yes' : 'No'),
      sortable: true,
    },
  ]);

  const token = 'your-bearer-token-here'; // Replace with your actual Bearer token

  // Fetch data based on the selected dropdown option
  useEffect(() => {
    const fetchData = async () => {
      if (selectedOption) {
        try {
          const response = await fetch(`https://api.example.com/data?filter=${selectedOption}`, {
            method: 'GET',
            headers: {
              'Authorization': `Bearer ${token}`,
              'Content-Type': 'application/json',
              'Access-Control-Allow-Origin': '*', // This is for CORS, but usually handled by the server
            },
            credentials: 'include', // Include credentials if needed
          });

          if (!response.ok) {
            throw new Error('Network response was not ok');
          }

          const data = await response.json();
          setRowData(data);
        } catch (error) {
          console.error('Error fetching data:', error);
        }
      }
    };

    fetchData();
  }, [selectedOption]);

  // Handle dropdown change
  const handleDropdownChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
    setSelectedOption(event.target.value);
  };

  return (
    <div>
      {/* Dropdown for selecting data filter */}
      <div style={{ marginBottom: '10px' }}>
        <label htmlFor="dataSelect">Select Data: </label>
        <select id="dataSelect" value={selectedOption} onChange={handleDropdownChange}>
          <option value="">-- Select an Option --</option>
          <option value="option1">Option 1</option>
          <option value="option2">Option 2</option>
          <option value="option3">Option 3</option>
        </select>
      </div>

      {/* AG Grid */}
      <div className="ag-theme-alpine" style={{ height: '400px', width: '100%' }}>
        <AgGridReact
          rowData={rowData}
          columnDefs={columnDefs}
          defaultColDef={{ sortable: true, filter: true, resizable: true }}
        />
      </div>
    </div>
  );
};

export default GridComponent;



new//

// GridComponent.tsx
import React, { useState, useEffect } from 'react';
import { AgGridReact } from 'ag-grid-react';
import { ColDef } from 'ag-grid-community';
import 'ag-grid-community/styles/ag-grid.css';
import 'ag-grid-community/styles/ag-theme-alpine.css';

interface RowData {
  store: string;
  datapoint: number;
  test: string;
  inactive: boolean;
}

const GridComponent: React.FC = () => {
  const [rowData, setRowData] = useState<RowData[]>([]);
  const [selectedOption, setSelectedOption] = useState<string>(''); // State for dropdown selection
  const [columnDefs] = useState<ColDef[]>([
    { headerName: 'Store', field: 'store' },
    { headerName: 'Datapoint', field: 'datapoint', sortable: true, filter: true },
    { headerName: 'Test', field: 'test' },
    {
      headerName: 'InActive',
      field: 'inactive',
      cellRenderer: (params: any) => (params.value ? 'Yes' : 'No'),
      sortable: true,
    },
  ]);

  const token = 'your-bearer-token-here'; // Replace with your actual Bearer token

  // Fetch data based on the selected dropdown option
  useEffect(() => {
    const fetchData = async () => {
      if (selectedOption) {
        try {
          const response = await fetch(`https://api.example.com/data?filter=${selectedOption}`, {
            method: 'GET',
            headers: {
              'Authorization': `Bearer ${token}`,
              'Content-Type': 'application/json',
              'Access-Control-Allow-Origin': '*', // This is for CORS, but usually handled by the server
            },
            credentials: 'include', // Include credentials if needed
          });

          if (!response.ok) {
            throw new Error('Network response was not ok');
          }

          const data = await response.json();
          setRowData(data);
        } catch (error) {
          console.error('Error fetching data:', error);
        }
      }
    };

    fetchData();
  }, [selectedOption]);

  // Handle dropdown change
  const handleDropdownChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
    setSelectedOption(event.target.value);
  };

  return (
    <div>
      {/* Dropdown for selecting data filter */}
      <div style={{ marginBottom: '10px' }}>
        <label htmlFor="dataSelect">Select Data: </label>
        <select id="dataSelect" value={selectedOption} onChange={handleDropdownChange}>
          <option value="">-- Select an Option --</option>
          <option value="option1">Option 1</option>
          <option value="option2">Option 2</option>
          <option value="option3">Option 3</option>
        </select>
      </div>

      {/* AG Grid */}
      <div className="ag-theme-alpine" style={{ height: '400px', width: '100%' }}>
        <AgGridReact
          rowData={rowData}
          columnDefs={columnDefs}
          defaultColDef={{ sortable: true, filter: true, resizable: true }}
        />
      </div>
    </div>
  );
};

export default GridComponent;
